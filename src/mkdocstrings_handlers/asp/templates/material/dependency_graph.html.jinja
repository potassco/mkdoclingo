{% filter heading(config.start_level+1, id="dependency_graph", toc_label="Dependency Graph") %}
<span class="md-icon">{{ ":material-graphql:"|convert_markdown(3) }}</span> Dependency Graph
{% endfilter %}

{% filter convert_markdown(0) %}
```mermaid
flowchart LR
    {%- for node in dependency_graph.nodes %}
    {{node.predicate}}(["{{node.predicate}}"])
         {%- for positive in node.positive %}
         {{positive}} --> {{node.predicate}}
         {%- endfor %}
         {%- for negative in node.negative %}
         {{negative}} -.-> {{node.predicate}}
         {%- endfor %}
    {%- endfor %}
    classDef all fill:#00000000
    class {% for node in dependency_graph.nodes %}{{node.predicate}},{% endfor %} all;
    classDef out stroke:#52BF54,stroke-width:3px;
    class {% for node in dependency_graph.nodes %}{{node.predicate}},{% endfor %} out;
    classDef in stroke:#9178C6,stroke-width:3px;
    class {% for node in dependency_graph.nodes %}{% if node.predicate_object.is_input %}{{node.predicate}},{% endif %}{% endfor %} in;
    classDef aux stroke:#848484,stroke-width:0.2px;
```
{% endfilter %}
